{"version":3,"sources":["Cell.js","Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","handleClick","bind","evt","this","flipCellsAroundMe","classes","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightsStartOn","coord","console","log","split","map","Number","flipCell","every","cell","setState","tblBoard","flipCellsAround","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba1957f9.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport './Cell.css'\r\n\r\nclass Cell extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(evt) {\r\n        this.props.flipCellsAroundMe();\r\n    }\r\n\r\n    render(){\r\n        let classes = \"Cell\" + (this.props.isLit ? \"Cell-lit\" : \"\");\r\n        return(\r\n            <td className={classes} onClick={this.handleClick} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cell;","import React, {Component} from 'react'\r\nimport Cell from './Cell'\r\nimport './Board.css'\r\n\r\nclass Board extends Component{\r\n\r\n    static defaultProps = {\r\n        nrows: 5,\r\n        ncols: 5,\r\n        chanceLightsStartOn: 0.25\r\n    }\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            hasWon: false,\r\n            board: this.createBoard()\r\n        };\r\n    }\r\n\r\n    createBoard(){\r\n        let board = [];\r\n        // TODO: create array-of-arrays of true/false\r\n\r\n        for (let y = 0; y < this.props.nrows; y++) {\r\n            let row = [];\r\n            for (let x = 0; x < this.props.ncols; x++) {\r\n                row.push(Math.random() < this.props.chanceLightsStartOn)\r\n            }\r\n            board.push(row);\r\n        }\r\n        return board;\r\n    }\r\n\r\n    flipCellsAround(coord) {\r\n        console.log(coord)\r\n        let { ncols, nrows } = this.props;\r\n        let board = this.state.board;\r\n        let [y, x] = coord.split(\"-\").map(Number);\r\n\r\n        function flipCell(y, x) {\r\n            // if coord is actually on board, flip it\r\n\r\n            if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n                board[y][x] = !board[y][x];\r\n            }\r\n        }\r\n\r\n        flipCell(y, x);\r\n        flipCell(y, x-1);\r\n        flipCell(y, x+1);\r\n        flipCell(y-1, x);\r\n        flipCell(y+1, x);\r\n\r\n        let hasWon = board.every(row => row.every(cell => !cell));\r\n\r\n        this.setState({ board, hasWon });\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasWon){\r\n            return(\r\n            <div className='Board-Title'>\r\n                <div className='winner'>\r\n                    <span className='neon-orange'>YOU</span>\r\n                    <span className='neon-blue'>WIN!!</span>\r\n                </div>\r\n            </div>)\r\n        }\r\n        // TODO: Make table board\r\n        // TODO: if the game is won, just show a winning msg & render nothing else \r\n\r\n        let tblBoard = []; \r\n        for (let y = 0; y < this.props.nrows; y++){\r\n            let row = [];\r\n            for (let x = 0; x < this.props.ncols; x++){\r\n                let coord = `${y}-${x}`;\r\n                row.push(<Cell \r\n                    key={coord} \r\n                    isLit={this.state.board[y][x]} \r\n                    flipCellsAroundMe = {() => this.flipCellsAround(coord)} />)\r\n            }\r\n            tblBoard.push(<tr>{row}</tr>)\r\n        }\r\n        return(\r\n            <div>\r\n                <div className='Board-Title'>\r\n                    <div className='neon-orange'>Lights</div>\r\n                    <div className='neon-blue'>Out</div>\r\n                </div>\r\n                <table className='Board'>\r\n                    <tbody>\r\n                        {tblBoard}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board;","import Board from './Board'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}